const std = @import("std");
const builtin = @import("builtin");
const HBP_VERSION = @import("config").HBP_VERSION;

const assert = std.debug.assert;
const expect = std.testing.expect;
const eql = std.mem.eql;

const native_endian = builtin.cpu.arch.endian();

const Serializer = @This();

pub fn serializeBool(buf: []u8, value: bool) []const u8 {
    buf[0] = HBP_VERSION;
    buf[1] = if (value) 0x02 else 0x01;
    return buf[0..2];
}

test serializeBool {
    var buf: [8]u8 = undefined;
    try expect(eql(u8, serializeBool(&buf, false), &.{ 0x01, 0x01 }));
    try expect(eql(u8, serializeBool(&buf, true), &.{ 0x01, 0x02 }));
}

pub fn serializeInt(comptime T: type, buf: []u8, value: T) []const u8 {
    const alignedType = std.math.ByteAlignedInt(T);
    const info = @typeInfo(alignedType).Int;

    const base = if (comptime info.signedness == .signed) 0x10 else 0x20;

    const marker: []const u8 = comptime switch (info.bits) {
        8 => &.{base},
        16 => &.{base + 1},
        32 => &.{base + 2},
        64 => &.{base + 3},
        128 => &.{base + 4},
        256 => &.{base + 5},
        512 => &.{base + 6},
        else => |bits| &[_]u8{base + 0x0F} ++ &@as([2]u8, @bitCast(if (native_endian == .big) bits else @byteSwap(bits))),
    };

    const buffer_size = comptime @divExact(@typeInfo(alignedType).Int.bits, 8);

    var buffer: [1 + marker.len + buffer_size]u8 = undefined;
    buffer[0] = HBP_VERSION;

    inline for (marker, 1..) |byte, i| {
        buffer[i] = byte;
    }

    const offset_ptr: *[buffer_size]u8 = @ptrFromInt(@intFromPtr(&buffer) + marker.len + 1);
    offset_ptr.* = @bitCast(if (comptime native_endian == .big) @as(alignedType, value) else @byteSwap(@as(alignedType, value)));

    @memcpy(buf[0..buffer.len], &buffer);
    return buf[0..buffer.len];
}

test serializeInt {
    var buf: [100]u8 = undefined;

    try expect(eql(u8, serializeInt(i8, &buf, 45), &.{ 0x01, 0x10, 0x2D }));
    try expect(eql(u8, serializeInt(i16, &buf, 6347), &.{ 0x01, 0x11, 0x18, 0xCB }));
    try expect(eql(u8, serializeInt(i32, &buf, 9123424), &.{ 0x01, 0x12, 0x00, 0x8B, 0x36, 0x60 }));
    try expect(eql(u8, serializeInt(i64, &buf, 5294967295), &.{ 0x01, 0x13, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }));
    try expect(eql(u8, serializeInt(i128, &buf, 28446744073709551615), &.{ 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8A, 0xC7, 0x23, 0x04, 0x89, 0xE7, 0xFF, 0xFF }));
    try expect(eql(u8, serializeInt(i256, &buf, 340282366920938463463375607431768211456), &.{ 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8D, 0x7E, 0xA4, 0xC6, 0x80, 0x00 }));
    try expect(eql(u8, serializeInt(i512, &buf, 115792089237316395423570985008687907853269984665640564039457584007913129639935), &.{ 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x75, 0xD6, 0x95, 0xC2, 0x70, 0x6A, 0xC5, 0xE9, 0x70, 0x44, 0xC3, 0xB2, 0xD3, 0xEF, 0x59, 0x29, 0x94, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }));
    try expect(eql(u8, serializeInt(i6, &buf, 30), &.{ 0x01, 0x10, 0x1E }));
    try expect(eql(u8, serializeInt(i38, &buf, 9123424), &.{ 0x01, 0x1F, 0x00, 0x28, 0x00, 0x00, 0x8B, 0x36, 0x60 }));
    try expect(eql(u8, serializeInt(i80, &buf, 5294967295), &.{ 0x01, 0x1F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }));

    try expect(eql(u8, serializeInt(u8, &buf, 250), &.{ 0x01, 0x20, 0xFA }));
    try expect(eql(u8, serializeInt(u16, &buf, 6347), &.{ 0x01, 0x21, 0x18, 0xCB }));
    try expect(eql(u8, serializeInt(u32, &buf, 9123424), &.{ 0x01, 0x22, 0x00, 0x8B, 0x36, 0x60 }));
    try expect(eql(u8, serializeInt(u64, &buf, 5294967295), &.{ 0x01, 0x23, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }));
    try expect(eql(u8, serializeInt(u128, &buf, 28446744073709551615), &.{ 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8A, 0xC7, 0x23, 0x04, 0x89, 0xE7, 0xFF, 0xFF }));
    try expect(eql(u8, serializeInt(u256, &buf, 340282366920938463463375607431768211456), &.{ 0x01, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8D, 0x7E, 0xA4, 0xC6, 0x80, 0x00 }));
    try expect(eql(u8, serializeInt(u512, &buf, 115792089237316395423570985008687907853269984665640564039457584007913129639935), &.{ 0x01, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x75, 0xD6, 0x95, 0xC2, 0x70, 0x6A, 0xC5, 0xE9, 0x70, 0x44, 0xC3, 0xB2, 0xD3, 0xEF, 0x59, 0x29, 0x94, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }));
    try expect(eql(u8, serializeInt(u6, &buf, 30), &.{ 0x01, 0x20, 0x1E }));
    try expect(eql(u8, serializeInt(u38, &buf, 9123424), &.{ 0x01, 0x2F, 0x00, 0x28, 0x00, 0x00, 0x8B, 0x36, 0x60 }));
    try expect(eql(u8, serializeInt(u80, &buf, 5294967295), &.{ 0x01, 0x2F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }));
}

const std = @import("std");
const builtin = @import("builtin");
const HBP_VERSION = @import("config").HBP_VERSION;

const assert = std.debug.assert;
const expect = std.testing.expect;

const native_endian = builtin.cpu.arch.endian();

const Deserializer = @This();

pub fn deserializeBool(buffer: []const u8) bool {
    return switch (buffer[1]) {
        0x01 => false,
        0x02 => true,
        else => unreachable,
    };
}

test deserializeBool {
    try expect(deserializeBool(&.{ 0x01, 0x01 }) == false);
    try expect(deserializeBool(&.{ 0x01, 0x02 }) == true);
}

/// Fast path deserialization for integers.
/// Skips checks on the type and assumes it will be the same
/// or fit in the given integer type.
pub fn deserializeIntAssumeType(comptime T: type, buffer: []const u8) std.math.ByteAlignedInt(T) {
    const alignedType = std.math.ByteAlignedInt(T);
    const info = @typeInfo(alignedType).int;

    const base = if (comptime info.signedness == .signed) 0x10 else 0x20;
    const buf = if (buffer[0] == HBP_VERSION) buffer[1..] else buffer;

    switch (buf[0]) {
        base...(base + 6) => {
            const slice = buf[1..];
            assert(slice.len <= (info.bits / 8));
            const data = std.mem.bytesToValue(alignedType, slice);
            return std.mem.nativeToBig(alignedType, data);
        },
        base + 0x0F => {
            const slice = buf[3..];
            assert(slice.len <= (info.bits / 8));
            const data = std.mem.bytesToValue(alignedType, slice);
            return std.mem.nativeToBig(alignedType, data);
        },
        else => unreachable,
    }
}

pub fn deserializeStringAssumeLength(comptime max_len: u32, buffer: []const u8) !struct { [max_len]u8, u32 } {
    var buf = if (buffer[0] == HBP_VERSION) buffer[1..] else buffer;
    if (buf[0] != 0xE0) return error.InvalidBuffer;

    buf = buf[3..];

    var temp: [max_len]u8 = undefined;
    @memcpy(temp[0..buf.len], buf);
    return .{ temp, @intCast(buf.len) };
}

test deserializeIntAssumeType {
    try expect(deserializeIntAssumeType(i8, &.{ 0x01, 0x10, 0x2D }) == 45);
    try expect(deserializeIntAssumeType(i16, &.{ 0x01, 0x11, 0x18, 0xCB }) == 6347);
    try expect(deserializeIntAssumeType(i32, &.{ 0x01, 0x12, 0x00, 0x8B, 0x36, 0x60 }) == 9123424);
    try expect(deserializeIntAssumeType(i64, &.{ 0x01, 0x13, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }) == 5294967295);
    try expect(deserializeIntAssumeType(i128, &.{ 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8A, 0xC7, 0x23, 0x04, 0x89, 0xE7, 0xFF, 0xFF }) == 28446744073709551615);
    try expect(deserializeIntAssumeType(i256, &.{ 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8D, 0x7E, 0xA4, 0xC6, 0x80, 0x00 }) == 340282366920938463463375607431768211456);
    try expect(deserializeIntAssumeType(i512, &.{ 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x75, 0xD6, 0x95, 0xC2, 0x70, 0x6A, 0xC5, 0xE9, 0x70, 0x44, 0xC3, 0xB2, 0xD3, 0xEF, 0x59, 0x29, 0x94, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }) == 115792089237316395423570985008687907853269984665640564039457584007913129639935);
    try expect(deserializeIntAssumeType(i6, &.{ 0x01, 0x10, 0x1E }) == 30);
    try expect(deserializeIntAssumeType(i38, &.{ 0x01, 0x1F, 0x00, 0x28, 0x00, 0x00, 0x8B, 0x36, 0x60 }) == 9123424);
    try expect(deserializeIntAssumeType(i80, &.{ 0x01, 0x1F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }) == 5294967295);

    try expect(deserializeIntAssumeType(u8, &.{ 0x01, 0x20, 0xFA }) == 250);
    try expect(deserializeIntAssumeType(u16, &.{ 0x01, 0x21, 0x18, 0xCB }) == 6347);
    try expect(deserializeIntAssumeType(u32, &.{ 0x01, 0x22, 0x00, 0x8B, 0x36, 0x60 }) == 9123424);
    try expect(deserializeIntAssumeType(u64, &.{ 0x01, 0x23, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }) == 5294967295);
    try expect(deserializeIntAssumeType(u128, &.{ 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8A, 0xC7, 0x23, 0x04, 0x89, 0xE7, 0xFF, 0xFF }) == 28446744073709551615);
    try expect(deserializeIntAssumeType(u256, &.{ 0x01, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8D, 0x7E, 0xA4, 0xC6, 0x80, 0x00 }) == 340282366920938463463375607431768211456);
    try expect(deserializeIntAssumeType(u512, &.{ 0x01, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x75, 0xD6, 0x95, 0xC2, 0x70, 0x6A, 0xC5, 0xE9, 0x70, 0x44, 0xC3, 0xB2, 0xD3, 0xEF, 0x59, 0x29, 0x94, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }) == 115792089237316395423570985008687907853269984665640564039457584007913129639935);
    try expect(deserializeIntAssumeType(u6, &.{ 0x01, 0x20, 0x1E }) == 30);
    try expect(deserializeIntAssumeType(u38, &.{ 0x01, 0x2F, 0x00, 0x28, 0x00, 0x00, 0x8B, 0x36, 0x60 }) == 9123424);
    try expect(deserializeIntAssumeType(u80, &.{ 0x01, 0x2F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3B, 0x9A, 0xC9, 0xFF }) == 5294967295);
}
